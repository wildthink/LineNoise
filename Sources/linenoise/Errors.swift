/*
 Copyright (c) 2022, Jeremy Pereira <jeremy.j.pereira at icloud dot com>
 Copyright (c) 2017, Andy Best <andybest.net at gmail dot com>
 Copyright (c) 2010-2014, Salvatore Sanfilippo <antirez at gmail dot com>
 Copyright (c) 2010-2013, Pieter Noordhuis <pcnoordhuis at gmail dot com>
 
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 
 * Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.
 
 * Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import Foundation

public extension LineNoise
{
	/// Errors that can be generated by this library
	enum Error: Swift.Error
	{
		/// Thrown if the input file is not a tty.
		case notATTY
		/// Catch all error
		case generalError(String)
		/// End of input detected
		case EOF
		/// <kbd>ctrl</kbd>`-c` was detected in the input
		case CTRL_C
		/// If the current octet is not a valid octet for a UTF-8 start character
		case invalidUTF8Start(UInt8)
		/// If the current octet is not a valid UTF-8 continuation character
		case invalidUTF8Continuation(UInt8)
		/// If we are expecting a continuation character but we don't get one.
		case truncatedUTF8
		/// The terminal encoding is not supported.
		case unsupportedEncoding(String.Encoding)
		/// Failed to encode a string using the given encoding
		case cantEncode(String, String.Encoding)
	}

}
